""" 

Parsers of various output files.

"""

import numpy as np

from ase import Atoms
from ase.io.lammpsrun import read_lammps_dump
from ase.calculators.singlepoint import SinglePointCalculator


def parse_lammps_dump(specorder, log_lammps='log.lammps', dump_name='minimized.xyz'):
    """
    Reads a LAMMPS dump in `directory` and returns an ASE Atoms object with written forces and energies (which are read from `log_lammps`).
    """

    with open(dump_name) as f:
        structure = read_lammps_dump(f, specorder=specorder)

    # Get potential energy
    with open(log_lammps) as f:
        log_lines = f.readlines()

    for i, line in enumerate(log_lines):
        if 'Energy initial, next-to-last, final =' in line:
            energies_line = log_lines[i+1].strip()
            potential_energy = energies_line.split()[-1]
            structure.calc.results['energy'] = float(potential_energy)
            break

        elif 'Step PotEng' in line:
            energies_line = log_lines[i+1].strip()
            potential_energy = energies_line.split()[1]
            structure.calc.results['energy'] = float(potential_energy)
            break

    return structure


def parse_sisyphus_xyz(filename, specorder):
    """
    Reads an '*initp.xyz', '*minimum*.xyz' or '*saddlepoint*xyz' file generated by Sisyphus and returns
    an ASE Atoms object with written forces and energy.
    """

    with open(filename) as f:
        lines = f.readlines()

    sorted_lines = sorted(lines[2:], key=lambda line: int(line.split()[-1]))

    cell = np.array(lines[1].strip().split(' ')[1:10], dtype='float').reshape(3, 3, order='F')
    energy = float(lines[1].strip().split(':')[-1])

    positions_list = []
    forces_list = []
    for sorted_line in sorted_lines:
        positions_list.append(np.array([float(i) for i in sorted_line.strip().split()[1:4]]))
        forces_list.append(np.array([float(i) for i in sorted_line.strip().split()[4:7]]))

    positions = np.array(positions_list)
    forces = np.array(forces_list)

    atom_types = []

    for line in sorted_lines:
        atom_id = int(line.strip()[0])
        atom_types.append(specorder[atom_id - 1])

    atoms = Atoms(symbols=atom_types, positions=positions, pbc=True, cell=cell)
    atoms.calc = SinglePointCalculator(atoms, energy=energy, forces=forces)

    return atoms


