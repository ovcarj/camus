""" Definition of the EST (Evaluate STransitions) class.

This module is to handle the evaluation of the accuracy of an ML model against DFT.

"""

import numpy as np
import os
import warnings

import camus.tools.utils

from camus.batch import Batch


class EST():

    def __init__(self, evaluation_directory, specorder, 
            reference_set=None, stransitions=None, 
            evaluation_dictionary=None,
            scheduler='Slurm', dft_engine='VASP'):
        """
        Initializes a new EST object for evaluation of the accuracy of
        structures generated by Sisyphus (STransitions) against DFT.

        `reference_set` should be a Structures object.
        `stransitions` should be an STransitions object.

        `evaluation_dictionary` (TODO: Write exact format) should work with path to pkl or already loaded pkl (a dict)
        Possible status_list flags: `P` (pass/good structure), `W` (waiting for some other structure to be evaluated), `BC` (goes into next batch of calculation), `C` (calculation running), `B` (bad prediction), `T` (throw away)
        Structure of `waiting_for`: `index of structure that's waiting for`: `{'calculation_label', index}`

        `evaluation_directory` is the directory where the evaluation calculations will run.

        Parameters:
            to_be_written (TODO): TODO.
        """

        if (reference_set is None) and (stransitions is None) and (evaluation_dictionary is None):
            warnings.warn("EST is not expected to be initialized without reference_set, stransitions and/or evaluation_dictionary.")

        self.evaluation_directory = evaluation_directory
        self.specorder = specorder

        self.reference_set = reference_set
        self.stransitions = stransitions

        if evaluation_dictionary is not None:
            if type(evaluation_dictionary) == str:
                self.evaluation_dictionary = camus.tools.utils.load_pickle(evaluation_dictionary)
            elif type(evaluation_dictionary) == dict:
                self.evaluation_dictionary = evaluation_dictionary
            else:
                raise TypeError("evaluation_dictionary should be given as a path to a .pkl file or a dict.")

        else:
            self.evaluation_dictionary = evaluation_dictionary

        self.scheduler = scheduler
        self.dft_engine = dft_engine

        # Create evaluation base directory if it does not exist
        if not os.path.exists(self.evaluation_directory):
            os.makedirs(self.evaluation_directory)
                

    def initialize_evaluation(self, prefilter_mode=None, prefilter_args=None):

        if prefilter_mode or prefilter_args:
            raise NotImplementedError("Prefiltering will be implemented soon...")

        self.stransitions.compare_to_reference(reference_set=self.reference_set, specorder=self.specorder)
        self.stransitions.cluster_stransitions(specorder=self.specorder, additional_flags_dictionary=self.stransitions._CR_dictionary_composition)
        self.stransitions.create_evaluation_dictionary()

        self.evaluation_dictionary = self.stransitions._evaluation_dictionary

        self.CR_dictionary = self.stransitions._CR_dictionary_stransitions
        self.cluster_dictionary = self.stransitions._cluster_dictionary_stransitions

        # Save dictionaries

        camus.tools.utils.save_to_pickle(self.evaluation_dictionary, os.path.join(self.evaluation_directory, 'evaluation.pkl'))
        camus.tools.utils.save_to_pickle(self.CR_dictionary, os.path.join(self.evaluation_directory, 'CR.pkl'))
        camus.tools.utils.save_to_pickle(self.cluster_dictionary, os.path.join(self.evaluation_directory, 'clusters.pkl'))
